{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  name: \"User\",\n  data() {\n    return {\n      tableData: [],\n      pageNum: 1,\n      pageSize: 10,\n      total: 0,\n      loading: false,\n      saving: false,\n      username: null,\n      fromVisible: false,\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        username: [{\n          required: true,\n          message: 'Please enter username',\n          trigger: 'blur'\n        }, {\n          min: 3,\n          message: 'Username must be at least 3 characters',\n          trigger: 'blur'\n        }],\n        name: [{\n          required: true,\n          message: 'Please enter full name',\n          trigger: 'blur'\n        }],\n        email: [{\n          type: 'email',\n          message: 'Please enter a valid email address',\n          trigger: 'blur'\n        }]\n      },\n      ids: []\n    };\n  },\n  created() {\n    this.load(1);\n  },\n  methods: {\n    // Add new user\n    handleAdd() {\n      this.form = {};\n      this.fromVisible = true;\n    },\n    // Edit user\n    handleEdit(row) {\n      this.form = JSON.parse(JSON.stringify(row));\n      this.fromVisible = true;\n    },\n    // Save user (add or update)\n    save() {\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.saving = true;\n          this.$request({\n            url: this.form.id ? '/user/update' : '/user/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              this.$message.success(this.form.id ? 'User updated successfully' : 'User added successfully');\n              this.load(1);\n              this.fromVisible = false;\n            } else {\n              this.$message.error(res.msg || 'Operation failed');\n            }\n          }).catch(err => {\n            this.$message.error('Network error, please try again');\n            console.error('Save user error:', err);\n          }).finally(() => {\n            this.saving = false;\n          });\n        }\n      });\n    },\n    // Delete single user\n    del(id) {\n      this.$confirm('Are you sure you want to delete this user?', 'Confirm Delete', {\n        type: \"warning\",\n        confirmButtonText: 'Delete',\n        cancelButtonText: 'Cancel'\n      }).then(response => {\n        this.$request.delete('/user/delete/' + id).then(res => {\n          if (res.code === '200') {\n            this.$message.success('User deleted successfully');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg || 'Delete failed');\n          }\n        });\n      }).catch(() => {\n        this.$message.info('Delete cancelled');\n      });\n    },\n    // Handle selection change\n    handleSelectionChange(rows) {\n      this.ids = rows.map(v => v.id);\n    },\n    // Batch delete\n    delBatch() {\n      if (!this.ids.length) {\n        this.$message.warning('Please select users to delete');\n        return;\n      }\n      this.$confirm(`Are you sure you want to delete ${this.ids.length} selected users?`, 'Confirm Batch Delete', {\n        type: \"warning\",\n        confirmButtonText: 'Delete',\n        cancelButtonText: 'Cancel'\n      }).then(response => {\n        this.$request.delete('/user/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            this.$message.success('Users deleted successfully');\n            this.load(1);\n          } else {\n            this.$message.error(res.msg || 'Batch delete failed');\n          }\n        });\n      }).catch(() => {\n        this.$message.info('Batch delete cancelled');\n      });\n    },\n    // Load data with pagination\n    load(pageNum) {\n      if (pageNum) this.pageNum = pageNum;\n      this.loading = true;\n      this.$request.get('/user/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          username: this.username\n        }\n      }).then(res => {\n        this.tableData = res.data?.list || [];\n        this.total = res.data?.total || 0;\n      }).catch(err => {\n        this.$message.error('Failed to load users');\n        console.error('Load users error:', err);\n      }).finally(() => {\n        this.loading = false;\n      });\n    },\n    // Reset search\n    reset() {\n      this.username = null;\n      this.load(1);\n      this.$message.success('Search has been reset');\n    },\n    // Handle page change\n    handleCurrentChange(pageNum) {\n      this.load(pageNum);\n    },\n    // Handle page size change\n    handleSizeChange(pageSize) {\n      this.pageSize = pageSize;\n      this.load(1);\n    },\n    // Handle avatar upload success\n    handleAvatarSuccess(response, file, fileList) {\n      this.form.avatar = response.data;\n      this.$message.success('Avatar uploaded successfully');\n    },\n    // Before avatar upload\n    beforeAvatarUpload(file) {\n      const isJPG = file.type === 'image/jpeg' || file.type === 'image/png';\n      const isLt2M = file.size / 1024 / 1024 < 2;\n      if (!isJPG) {\n        this.$message.error('Avatar must be JPG or PNG format!');\n      }\n      if (!isLt2M) {\n        this.$message.error('Avatar size cannot exceed 2MB!');\n      }\n      return isJPG && isLt2M;\n    },\n    // Get role tag type\n    getRoleType(role) {\n      const roleMap = {\n        'admin': 'danger',\n        'manager': 'warning',\n        'user': 'info',\n        'vip': 'success'\n      };\n      return roleMap[role?.toLowerCase()] || 'info';\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","loading","saving","username","fromVisible","form","user","JSON","parse","localStorage","getItem","rules","required","message","trigger","min","email","type","ids","created","load","methods","handleAdd","handleEdit","row","stringify","save","$refs","formRef","validate","valid","$request","url","id","method","then","res","code","$message","success","error","msg","catch","err","console","finally","del","$confirm","confirmButtonText","cancelButtonText","response","delete","info","handleSelectionChange","rows","map","v","delBatch","length","warning","get","params","list","reset","handleCurrentChange","handleSizeChange","handleAvatarSuccess","file","fileList","avatar","beforeAvatarUpload","isJPG","isLt2M","size","getRoleType","role","roleMap","toLowerCase"],"sources":["src/views/manager/User.vue"],"sourcesContent":["<template>\r\n  <div class=\"user-container\">\r\n    <!-- Search Section -->\r\n    <div class=\"search-section\">\r\n      <div class=\"search-header\">\r\n        <i class=\"el-icon-search\"></i>\r\n        <span class=\"header-title\">Search Users</span>\r\n      </div>\r\n      <div class=\"search-content\">\r\n        <el-input\r\n            placeholder=\"Enter username to search\"\r\n            style=\"width: 250px\"\r\n            v-model=\"username\"\r\n            prefix-icon=\"el-icon-user\"\r\n            clearable>\r\n        </el-input>\r\n        <el-button\r\n            type=\"primary\"\r\n            plain\r\n            style=\"margin-left: 15px\"\r\n            @click=\"load(1)\"\r\n            icon=\"el-icon-search\">\r\n          Search\r\n        </el-button>\r\n        <el-button\r\n            type=\"warning\"\r\n            plain\r\n            style=\"margin-left: 10px\"\r\n            @click=\"reset\"\r\n            icon=\"el-icon-refresh\">\r\n          Reset\r\n        </el-button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Operation Section -->\r\n    <div class=\"operation-section\">\r\n      <div class=\"operation-header\">\r\n        <i class=\"el-icon-setting\"></i>\r\n        <span class=\"header-title\">Operations</span>\r\n      </div>\r\n      <div class=\"operation-content\">\r\n        <el-button\r\n            type=\"success\"\r\n            plain\r\n            @click=\"handleAdd\"\r\n            icon=\"el-icon-plus\">\r\n          Add User\r\n        </el-button>\r\n        <el-button\r\n            type=\"danger\"\r\n            plain\r\n            @click=\"delBatch\"\r\n            icon=\"el-icon-delete\"\r\n            :disabled=\"!ids.length\">\r\n          Batch Delete ({{ ids.length }})\r\n        </el-button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Table Section -->\r\n    <div class=\"table-section\">\r\n      <div class=\"table-header\">\r\n        <i class=\"el-icon-user\"></i>\r\n        <span class=\"header-title\">User List</span>\r\n        <el-tag\r\n            size=\"small\"\r\n            type=\"info\"\r\n            style=\"margin-left: 15px\">\r\n          Total: {{ total }} users\r\n        </el-tag>\r\n      </div>\r\n\r\n      <el-table\r\n          :data=\"tableData\"\r\n          stripe\r\n          border\r\n          @selection-change=\"handleSelectionChange\"\r\n          v-loading=\"loading\"\r\n          element-loading-text=\"Loading users...\"\r\n          empty-text=\"No users found\"\r\n          class=\"user-table\">\r\n\r\n        <el-table-column\r\n            type=\"selection\"\r\n            width=\"55\"\r\n            align=\"center\">\r\n        </el-table-column>\r\n\r\n        <el-table-column\r\n            prop=\"id\"\r\n            label=\"ID\"\r\n            width=\"70\"\r\n            align=\"center\"\r\n            sortable>\r\n          <template v-slot=\"scope\">\r\n            <el-tag size=\"mini\" type=\"primary\">\r\n              {{ scope.row.id }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column\r\n            label=\"Avatar\"\r\n            width=\"80\"\r\n            align=\"center\">\r\n          <template v-slot=\"scope\">\r\n            <div class=\"avatar-container\">\r\n              <el-avatar\r\n                  :size=\"45\"\r\n                  :src=\"scope.row.avatar\"\r\n                  :alt=\"scope.row.name\"\r\n                  icon=\"el-icon-user-solid\"\r\n                  class=\"user-avatar\">\r\n              </el-avatar>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column\r\n            prop=\"username\"\r\n            label=\"Username\"\r\n            show-overflow-tooltip\r\n            min-width=\"120\">\r\n          <template v-slot=\"scope\">\r\n            <div class=\"username-info\">\r\n              <i class=\"el-icon-user\"></i>\r\n              <span>{{ scope.row.username }}</span>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column\r\n            prop=\"name\"\r\n            label=\"Full Name\"\r\n            show-overflow-tooltip\r\n            min-width=\"100\">\r\n        </el-table-column>\r\n\r\n        <el-table-column\r\n            prop=\"phone\"\r\n            label=\"Phone\"\r\n            show-overflow-tooltip\r\n            min-width=\"120\">\r\n          <template v-slot=\"scope\">\r\n            <div class=\"phone-info\">\r\n              <i class=\"el-icon-phone\"></i>\r\n              <span>{{ scope.row.phone || 'N/A' }}</span>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column\r\n            prop=\"email\"\r\n            label=\"Email\"\r\n            show-overflow-tooltip\r\n            min-width=\"150\">\r\n          <template v-slot=\"scope\">\r\n            <div class=\"email-info\">\r\n              <i class=\"el-icon-message\"></i>\r\n              <span>{{ scope.row.email || 'N/A' }}</span>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column\r\n            prop=\"role\"\r\n            label=\"Role\"\r\n            width=\"100\"\r\n            align=\"center\">\r\n          <template v-slot=\"scope\">\r\n            <el-tag\r\n                :type=\"getRoleType(scope.row.role)\"\r\n                size=\"small\">\r\n              {{ scope.row.role || 'User' }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column\r\n            prop=\"account\"\r\n            label=\"Balance\"\r\n            width=\"100\"\r\n            align=\"center\">\r\n          <template v-slot=\"scope\">\r\n            <span class=\"balance-amount\">\r\n              ¥{{ scope.row.account || '0.00' }}\r\n            </span>\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <el-table-column\r\n            label=\"Actions\"\r\n            align=\"center\"\r\n            width=\"160\"\r\n            fixed=\"right\">\r\n          <template v-slot=\"scope\">\r\n            <el-button\r\n                size=\"mini\"\r\n                type=\"primary\"\r\n                plain\r\n                @click=\"handleEdit(scope.row)\"\r\n                icon=\"el-icon-edit\">\r\n              Edit\r\n            </el-button>\r\n            <el-button\r\n                size=\"mini\"\r\n                type=\"danger\"\r\n                plain\r\n                @click=\"del(scope.row.id)\"\r\n                icon=\"el-icon-delete\">\r\n              Delete\r\n            </el-button>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n\r\n      <!-- Pagination -->\r\n      <div class=\"pagination-section\">\r\n        <el-pagination\r\n            background\r\n            @current-change=\"handleCurrentChange\"\r\n            @size-change=\"handleSizeChange\"\r\n            :current-page=\"pageNum\"\r\n            :page-sizes=\"[5, 10, 20, 50]\"\r\n            :page-size=\"pageSize\"\r\n            layout=\"total, sizes, prev, pager, next, jumper\"\r\n            :total=\"total\">\r\n        </el-pagination>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- User Form Dialog -->\r\n    <el-dialog\r\n        :title=\"form.id ? 'Edit User' : 'Add New User'\"\r\n        :visible.sync=\"fromVisible\"\r\n        width=\"45%\"\r\n        :close-on-click-modal=\"false\"\r\n        destroy-on-close\r\n        class=\"user-dialog\">\r\n\r\n      <el-form\r\n          :model=\"form\"\r\n          label-width=\"120px\"\r\n          style=\"padding-right: 30px\"\r\n          :rules=\"rules\"\r\n          ref=\"formRef\"\r\n          @submit.native.prevent>\r\n\r\n        <el-form-item label=\"Avatar\">\r\n          <div class=\"avatar-upload-section\">\r\n            <el-avatar\r\n                :size=\"80\"\r\n                :src=\"form.avatar\"\r\n                icon=\"el-icon-user-solid\"\r\n                class=\"preview-avatar\">\r\n            </el-avatar>\r\n            <el-upload\r\n                class=\"avatar-uploader\"\r\n                :action=\"$baseUrl + '/files/upload'\"\r\n                :headers=\"{ token: user.token }\"\r\n                list-type=\"picture\"\r\n                :show-file-list=\"false\"\r\n                :on-success=\"handleAvatarSuccess\"\r\n                :before-upload=\"beforeAvatarUpload\">\r\n              <el-button type=\"primary\" size=\"small\" icon=\"el-icon-upload\">\r\n                Upload Avatar\r\n              </el-button>\r\n            </el-upload>\r\n          </div>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"Username\" prop=\"username\">\r\n          <el-input\r\n              v-model=\"form.username\"\r\n              placeholder=\"Enter username\"\r\n              prefix-icon=\"el-icon-user\">\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"Full Name\" prop=\"name\">\r\n          <el-input\r\n              v-model=\"form.name\"\r\n              placeholder=\"Enter full name\"\r\n              prefix-icon=\"el-icon-user-solid\">\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"Phone\" prop=\"phone\">\r\n          <el-input\r\n              v-model=\"form.phone\"\r\n              placeholder=\"Enter phone number\"\r\n              prefix-icon=\"el-icon-phone\">\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"Email\" prop=\"email\">\r\n          <el-input\r\n              v-model=\"form.email\"\r\n              placeholder=\"Enter email address\"\r\n              prefix-icon=\"el-icon-message\">\r\n          </el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"fromVisible = false\" icon=\"el-icon-close\">\r\n          Cancel\r\n        </el-button>\r\n        <el-button\r\n            type=\"primary\"\r\n            @click=\"save\"\r\n            :loading=\"saving\"\r\n            icon=\"el-icon-check\">\r\n          {{ saving ? 'Saving...' : 'Save' }}\r\n        </el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"User\",\r\n  data() {\r\n    return {\r\n      tableData: [],\r\n      pageNum: 1,\r\n      pageSize: 10,\r\n      total: 0,\r\n      loading: false,\r\n      saving: false,\r\n      username: null,\r\n      fromVisible: false,\r\n      form: {},\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {\r\n        username: [\r\n          { required: true, message: 'Please enter username', trigger: 'blur' },\r\n          { min: 3, message: 'Username must be at least 3 characters', trigger: 'blur' }\r\n        ],\r\n        name: [\r\n          { required: true, message: 'Please enter full name', trigger: 'blur' }\r\n        ],\r\n        email: [\r\n          { type: 'email', message: 'Please enter a valid email address', trigger: 'blur' }\r\n        ]\r\n      },\r\n      ids: []\r\n    }\r\n  },\r\n  created() {\r\n    this.load(1)\r\n  },\r\n  methods: {\r\n    // Add new user\r\n    handleAdd() {\r\n      this.form = {}\r\n      this.fromVisible = true\r\n    },\r\n\r\n    // Edit user\r\n    handleEdit(row) {\r\n      this.form = JSON.parse(JSON.stringify(row))\r\n      this.fromVisible = true\r\n    },\r\n\r\n    // Save user (add or update)\r\n    save() {\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.saving = true\r\n          this.$request({\r\n            url: this.form.id ? '/user/update' : '/user/add',\r\n            method: this.form.id ? 'PUT' : 'POST',\r\n            data: this.form\r\n          }).then(res => {\r\n            if (res.code === '200') {\r\n              this.$message.success(this.form.id ? 'User updated successfully' : 'User added successfully')\r\n              this.load(1)\r\n              this.fromVisible = false\r\n            } else {\r\n              this.$message.error(res.msg || 'Operation failed')\r\n            }\r\n          }).catch(err => {\r\n            this.$message.error('Network error, please try again')\r\n            console.error('Save user error:', err)\r\n          }).finally(() => {\r\n            this.saving = false\r\n          })\r\n        }\r\n      })\r\n    },\r\n\r\n    // Delete single user\r\n    del(id) {\r\n      this.$confirm('Are you sure you want to delete this user?', 'Confirm Delete', {\r\n        type: \"warning\",\r\n        confirmButtonText: 'Delete',\r\n        cancelButtonText: 'Cancel'\r\n      }).then(response => {\r\n        this.$request.delete('/user/delete/' + id).then(res => {\r\n          if (res.code === '200') {\r\n            this.$message.success('User deleted successfully')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg || 'Delete failed')\r\n          }\r\n        })\r\n      }).catch(() => {\r\n        this.$message.info('Delete cancelled')\r\n      })\r\n    },\r\n\r\n    // Handle selection change\r\n    handleSelectionChange(rows) {\r\n      this.ids = rows.map(v => v.id)\r\n    },\r\n\r\n    // Batch delete\r\n    delBatch() {\r\n      if (!this.ids.length) {\r\n        this.$message.warning('Please select users to delete')\r\n        return\r\n      }\r\n      this.$confirm(`Are you sure you want to delete ${this.ids.length} selected users?`, 'Confirm Batch Delete', {\r\n        type: \"warning\",\r\n        confirmButtonText: 'Delete',\r\n        cancelButtonText: 'Cancel'\r\n      }).then(response => {\r\n        this.$request.delete('/user/delete/batch', { data: this.ids }).then(res => {\r\n          if (res.code === '200') {\r\n            this.$message.success('Users deleted successfully')\r\n            this.load(1)\r\n          } else {\r\n            this.$message.error(res.msg || 'Batch delete failed')\r\n          }\r\n        })\r\n      }).catch(() => {\r\n        this.$message.info('Batch delete cancelled')\r\n      })\r\n    },\r\n\r\n    // Load data with pagination\r\n    load(pageNum) {\r\n      if (pageNum) this.pageNum = pageNum\r\n      this.loading = true\r\n\r\n      this.$request.get('/user/selectPage', {\r\n        params: {\r\n          pageNum: this.pageNum,\r\n          pageSize: this.pageSize,\r\n          username: this.username,\r\n        }\r\n      }).then(res => {\r\n        this.tableData = res.data?.list || []\r\n        this.total = res.data?.total || 0\r\n      }).catch(err => {\r\n        this.$message.error('Failed to load users')\r\n        console.error('Load users error:', err)\r\n      }).finally(() => {\r\n        this.loading = false\r\n      })\r\n    },\r\n\r\n    // Reset search\r\n    reset() {\r\n      this.username = null\r\n      this.load(1)\r\n      this.$message.success('Search has been reset')\r\n    },\r\n\r\n    // Handle page change\r\n    handleCurrentChange(pageNum) {\r\n      this.load(pageNum)\r\n    },\r\n\r\n    // Handle page size change\r\n    handleSizeChange(pageSize) {\r\n      this.pageSize = pageSize\r\n      this.load(1)\r\n    },\r\n\r\n    // Handle avatar upload success\r\n    handleAvatarSuccess(response, file, fileList) {\r\n      this.form.avatar = response.data\r\n      this.$message.success('Avatar uploaded successfully')\r\n    },\r\n\r\n    // Before avatar upload\r\n    beforeAvatarUpload(file) {\r\n      const isJPG = file.type === 'image/jpeg' || file.type === 'image/png'\r\n      const isLt2M = file.size / 1024 / 1024 < 2\r\n\r\n      if (!isJPG) {\r\n        this.$message.error('Avatar must be JPG or PNG format!')\r\n      }\r\n      if (!isLt2M) {\r\n        this.$message.error('Avatar size cannot exceed 2MB!')\r\n      }\r\n      return isJPG && isLt2M\r\n    },\r\n\r\n    // Get role tag type\r\n    getRoleType(role) {\r\n      const roleMap = {\r\n        'admin': 'danger',\r\n        'manager': 'warning',\r\n        'user': 'info',\r\n        'vip': 'success'\r\n      }\r\n      return roleMap[role?.toLowerCase()] || 'info'\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.user-container {\r\n  padding: 20px;\r\n  background: #f0f2f5;\r\n  min-height: 100vh;\r\n}\r\n\r\n.search-section,\r\n.operation-section,\r\n.table-section {\r\n  background: white;\r\n  border-radius: 8px;\r\n  padding: 20px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.search-header,\r\n.operation-header,\r\n.table-header {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 15px;\r\n  padding-bottom: 10px;\r\n  border-bottom: 1px solid #ebeef5;\r\n}\r\n\r\n.search-header i,\r\n.operation-header i,\r\n.table-header i {\r\n  font-size: 18px;\r\n  color: #409eff;\r\n  margin-right: 8px;\r\n}\r\n\r\n.header-title {\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.search-content,\r\n.operation-content {\r\n  display: flex;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.user-table {\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n}\r\n\r\n.avatar-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.user-avatar {\r\n  border: 2px solid #ebeef5;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.user-avatar:hover {\r\n  border-color: #409eff;\r\n}\r\n\r\n.username-info,\r\n.phone-info,\r\n.email-info {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n}\r\n\r\n.username-info i {\r\n  color: #409eff;\r\n}\r\n\r\n.phone-info i {\r\n  color: #67c23a;\r\n}\r\n\r\n.email-info i {\r\n  color: #e6a23c;\r\n}\r\n\r\n.balance-amount {\r\n  font-weight: bold;\r\n  color: #f56c6c;\r\n}\r\n\r\n.pagination-section {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.avatar-upload-section {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n}\r\n\r\n.preview-avatar {\r\n  border: 2px solid #ebeef5;\r\n}\r\n\r\n.dialog-footer {\r\n  text-align: right;\r\n}\r\n\r\n.dialog-footer .el-button {\r\n  margin-left: 10px;\r\n}\r\n\r\n/* Table styling */\r\n/deep/ .el-table th {\r\n  background-color: #fafafa;\r\n  color: #333;\r\n  font-weight: 600;\r\n}\r\n\r\n/deep/ .el-table td {\r\n  padding: 12px 0;\r\n}\r\n\r\n/* Button styling */\r\n/deep/ .el-button {\r\n  border-radius: 6px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n/deep/ .el-button:hover {\r\n  transform: translateY(-1px);\r\n}\r\n\r\n/* Dialog styling */\r\n/deep/ .user-dialog .el-dialog__header {\r\n  background: #f8f9fa;\r\n  padding: 20px;\r\n  border-bottom: 1px solid #ebeef5;\r\n}\r\n\r\n/deep/ .user-dialog .el-dialog__title {\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n/* Input styling */\r\n/deep/ .el-input__inner {\r\n  border-radius: 6px;\r\n}\r\n\r\n/* Upload styling */\r\n/deep/ .avatar-uploader .el-upload {\r\n  border-radius: 6px;\r\n}\r\n\r\n/* Responsive design */\r\n@media (max-width: 768px) {\r\n  .user-container {\r\n    padding: 15px;\r\n  }\r\n\r\n  .search-content,\r\n  .operation-content {\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n  }\r\n\r\n  .search-content .el-input {\r\n    width: 100% !important;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .pagination-section {\r\n    justify-content: center;\r\n  }\r\n\r\n  /deep/ .el-dialog {\r\n    width: 90% !important;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}