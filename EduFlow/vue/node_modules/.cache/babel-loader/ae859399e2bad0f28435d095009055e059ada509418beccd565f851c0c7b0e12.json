{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"Password\",\n  data() {\n    const validatePassword = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('Please confirm your password'));\n      } else if (value !== this.user.newPassword) {\n        callback(new Error('Password confirmation does not match'));\n      } else {\n        callback();\n      }\n    };\n    const validateNewPassword = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('Please enter a new password'));\n      } else if (value.length < 6) {\n        callback(new Error('Password must be at least 6 characters'));\n      } else if (value === this.user.password) {\n        callback(new Error('New password must be different from current password'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      loading: false,\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        password: [{\n          required: true,\n          message: 'Please enter your current password',\n          trigger: 'blur'\n        }, {\n          min: 1,\n          message: 'Current password cannot be empty',\n          trigger: 'blur'\n        }],\n        newPassword: [{\n          validator: validateNewPassword,\n          required: true,\n          trigger: 'blur'\n        }],\n        confirmPassword: [{\n          validator: validatePassword,\n          required: true,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created() {\n    // Initialize user data if needed\n    if (!this.user.password) this.user.password = '';\n    if (!this.user.newPassword) this.user.newPassword = '';\n    if (!this.user.confirmPassword) this.user.confirmPassword = '';\n  },\n  methods: {\n    update() {\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.loading = true;\n          this.$request.put('/updatePassword', this.user).then(res => {\n            if (res.code === '200') {\n              localStorage.removeItem('xm-user');\n              this.$message({\n                message: 'Password updated successfully! Please login again.',\n                type: 'success',\n                duration: 3000\n              });\n\n              // Delay redirect to show success message\n              setTimeout(() => {\n                this.$router.push('/login');\n              }, 1500);\n            } else {\n              this.$message.error(res.msg || 'Failed to update password');\n            }\n          }).catch(err => {\n            console.error('Password update error:', err);\n            this.$message.error('Network error, please try again');\n          }).finally(() => {\n            this.loading = false;\n          });\n        } else {\n          this.$message.warning('Please fill in all required fields correctly');\n        }\n      });\n    },\n    resetForm() {\n      this.$refs.formRef.resetFields();\n      this.user.password = '';\n      this.user.newPassword = '';\n      this.user.confirmPassword = '';\n      this.$message.info('Form has been reset');\n    }\n  }\n};","map":{"version":3,"names":["name","data","validatePassword","rule","value","callback","Error","user","newPassword","validateNewPassword","length","password","loading","JSON","parse","localStorage","getItem","rules","required","message","trigger","min","validator","confirmPassword","created","methods","update","$refs","formRef","validate","valid","$request","put","then","res","code","removeItem","$message","type","duration","setTimeout","$router","push","error","msg","catch","err","console","finally","warning","resetForm","resetFields","info"],"sources":["src/views/manager/Password.vue"],"sourcesContent":["<template>\r\n  <div class=\"password-container\">\r\n    <el-card class=\"password-card\" shadow=\"hover\">\r\n      <div slot=\"header\" class=\"card-header\">\r\n        <i class=\"el-icon-lock\"></i>\r\n        <span class=\"header-title\">Change Password</span>\r\n      </div>\r\n\r\n      <el-form\r\n          ref=\"formRef\"\r\n          :model=\"user\"\r\n          :rules=\"rules\"\r\n          label-width=\"140px\"\r\n          class=\"password-form\"\r\n          @submit.native.prevent>\r\n\r\n        <el-form-item label=\"Current Password\" prop=\"password\">\r\n          <el-input\r\n              show-password\r\n              v-model=\"user.password\"\r\n              placeholder=\"Enter current password\"\r\n              prefix-icon=\"el-icon-lock\"\r\n              clearable>\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"New Password\" prop=\"newPassword\">\r\n          <el-input\r\n              show-password\r\n              v-model=\"user.newPassword\"\r\n              placeholder=\"Enter new password\"\r\n              prefix-icon=\"el-icon-key\"\r\n              clearable>\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <el-form-item label=\"Confirm Password\" prop=\"confirmPassword\">\r\n          <el-input\r\n              show-password\r\n              v-model=\"user.confirmPassword\"\r\n              placeholder=\"Confirm new password\"\r\n              prefix-icon=\"el-icon-check\"\r\n              clearable\r\n              @keyup.enter.native=\"update\">\r\n          </el-input>\r\n        </el-form-item>\r\n\r\n        <div class=\"form-actions\">\r\n          <el-button\r\n              type=\"primary\"\r\n              @click=\"update\"\r\n              :loading=\"loading\"\r\n              icon=\"el-icon-check\"\r\n              size=\"medium\">\r\n            {{ loading ? 'Updating...' : 'Update Password' }}\r\n          </el-button>\r\n          <el-button\r\n              @click=\"resetForm\"\r\n              icon=\"el-icon-refresh\"\r\n              size=\"medium\">\r\n            Reset\r\n          </el-button>\r\n        </div>\r\n      </el-form>\r\n    </el-card>\r\n\r\n    <!-- Security Tips -->\r\n    <el-card class=\"tips-card\" shadow=\"never\">\r\n      <div slot=\"header\" class=\"tips-header\">\r\n        <i class=\"el-icon-info\"></i>\r\n        <span>Security Tips</span>\r\n      </div>\r\n      <div class=\"tips-content\">\r\n        <p><i class=\"el-icon-check\"></i> Use at least 8 characters</p>\r\n        <p><i class=\"el-icon-check\"></i> Include uppercase and lowercase letters</p>\r\n        <p><i class=\"el-icon-check\"></i> Include numbers and special characters</p>\r\n        <p><i class=\"el-icon-check\"></i> Don't use common passwords</p>\r\n      </div>\r\n    </el-card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"Password\",\r\n  data() {\r\n    const validatePassword = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('Please confirm your password'))\r\n      } else if (value !== this.user.newPassword) {\r\n        callback(new Error('Password confirmation does not match'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n\r\n    const validateNewPassword = (rule, value, callback) => {\r\n      if (value === '') {\r\n        callback(new Error('Please enter a new password'))\r\n      } else if (value.length < 6) {\r\n        callback(new Error('Password must be at least 6 characters'))\r\n      } else if (value === this.user.password) {\r\n        callback(new Error('New password must be different from current password'))\r\n      } else {\r\n        callback()\r\n      }\r\n    }\r\n\r\n    return {\r\n      loading: false,\r\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\r\n      rules: {\r\n        password: [\r\n          { required: true, message: 'Please enter your current password', trigger: 'blur' },\r\n          { min: 1, message: 'Current password cannot be empty', trigger: 'blur' }\r\n        ],\r\n        newPassword: [\r\n          { validator: validateNewPassword, required: true, trigger: 'blur' }\r\n        ],\r\n        confirmPassword: [\r\n          { validator: validatePassword, required: true, trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // Initialize user data if needed\r\n    if (!this.user.password) this.user.password = ''\r\n    if (!this.user.newPassword) this.user.newPassword = ''\r\n    if (!this.user.confirmPassword) this.user.confirmPassword = ''\r\n  },\r\n  methods: {\r\n    update() {\r\n      this.$refs.formRef.validate((valid) => {\r\n        if (valid) {\r\n          this.loading = true\r\n\r\n          this.$request.put('/updatePassword', this.user).then(res => {\r\n            if (res.code === '200') {\r\n              localStorage.removeItem('xm-user')\r\n              this.$message({\r\n                message: 'Password updated successfully! Please login again.',\r\n                type: 'success',\r\n                duration: 3000\r\n              })\r\n\r\n              // Delay redirect to show success message\r\n              setTimeout(() => {\r\n                this.$router.push('/login')\r\n              }, 1500)\r\n            } else {\r\n              this.$message.error(res.msg || 'Failed to update password')\r\n            }\r\n          }).catch(err => {\r\n            console.error('Password update error:', err)\r\n            this.$message.error('Network error, please try again')\r\n          }).finally(() => {\r\n            this.loading = false\r\n          })\r\n        } else {\r\n          this.$message.warning('Please fill in all required fields correctly')\r\n        }\r\n      })\r\n    },\r\n\r\n    resetForm() {\r\n      this.$refs.formRef.resetFields()\r\n      this.user.password = ''\r\n      this.user.newPassword = ''\r\n      this.user.confirmPassword = ''\r\n      this.$message.info('Form has been reset')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.password-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  min-height: 100vh;\r\n  padding: 40px 20px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  gap: 30px;\r\n}\r\n\r\n.password-card {\r\n  width: 100%;\r\n  max-width: 500px;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.card-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n.card-header i {\r\n  font-size: 20px;\r\n  color: #409eff;\r\n}\r\n\r\n.password-form {\r\n  padding: 20px 30px 10px;\r\n}\r\n\r\n.form-actions {\r\n  text-align: center;\r\n  margin-top: 30px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.form-actions .el-button {\r\n  margin: 0 10px;\r\n  padding: 12px 30px;\r\n  border-radius: 6px;\r\n  font-weight: 500;\r\n}\r\n\r\n.tips-card {\r\n  width: 100%;\r\n  max-width: 350px;\r\n  border-radius: 12px;\r\n  border: 1px solid #e8f4fd;\r\n  background: rgba(255, 255, 255, 0.95);\r\n}\r\n\r\n.tips-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #409eff;\r\n}\r\n\r\n.tips-content {\r\n  padding: 10px 0;\r\n}\r\n\r\n.tips-content p {\r\n  margin: 8px 0;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.tips-content i {\r\n  color: #67c23a;\r\n  font-size: 12px;\r\n}\r\n\r\n/* Form styling enhancements */\r\n/deep/ .el-form-item__label {\r\n  font-weight: 600;\r\n  color: #333;\r\n}\r\n\r\n/deep/ .el-input__inner {\r\n  border-radius: 6px;\r\n  border: 1px solid #dcdfe6;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n/deep/ .el-input__inner:focus {\r\n  border-color: #409eff;\r\n  box-shadow: 0 0 0 2px rgba(64, 158, 255, 0.2);\r\n}\r\n\r\n/deep/ .el-card__header {\r\n  background: #f8f9fa;\r\n  border-bottom: 1px solid #ebeef5;\r\n  padding: 20px;\r\n}\r\n\r\n/deep/ .el-button--primary {\r\n  background: linear-gradient(45deg, #409eff, #66b3ff);\r\n  border: none;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n/deep/ .el-button--primary:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 8px 25px rgba(64, 158, 255, 0.3);\r\n}\r\n\r\n/* Responsive design */\r\n@media (max-width: 768px) {\r\n  .password-container {\r\n    flex-direction: column;\r\n    padding: 20px 15px;\r\n  }\r\n\r\n  .password-card,\r\n  .tips-card {\r\n    max-width: 100%;\r\n  }\r\n\r\n  .password-form {\r\n    padding: 15px 20px;\r\n  }\r\n\r\n  /deep/ .el-form-item__label {\r\n    width: 120px !important;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .form-actions .el-button {\r\n    margin: 5px;\r\n    width: 45%;\r\n  }\r\n}\r\n</style>"],"mappings":";AAmFA;EACAA,IAAA;EACAC,KAAA;IACA,MAAAC,gBAAA,GAAAA,CAAAC,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAG,IAAA,CAAAC,WAAA;QACAH,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IAEA,MAAAI,mBAAA,GAAAA,CAAAN,IAAA,EAAAC,KAAA,EAAAC,QAAA;MACA,IAAAD,KAAA;QACAC,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,CAAAM,MAAA;QACAL,QAAA,KAAAC,KAAA;MACA,WAAAF,KAAA,UAAAG,IAAA,CAAAI,QAAA;QACAN,QAAA,KAAAC,KAAA;MACA;QACAD,QAAA;MACA;IACA;IAEA;MACAO,OAAA;MACAL,IAAA,EAAAM,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,KAAA;QACAN,QAAA,GACA;UAAAO,QAAA;UAAAC,OAAA;UAAAC,OAAA;QAAA,GACA;UAAAC,GAAA;UAAAF,OAAA;UAAAC,OAAA;QAAA,EACA;QACAZ,WAAA,GACA;UAAAc,SAAA,EAAAb,mBAAA;UAAAS,QAAA;UAAAE,OAAA;QAAA,EACA;QACAG,eAAA,GACA;UAAAD,SAAA,EAAApB,gBAAA;UAAAgB,QAAA;UAAAE,OAAA;QAAA;MAEA;IACA;EACA;EACAI,QAAA;IACA;IACA,UAAAjB,IAAA,CAAAI,QAAA,OAAAJ,IAAA,CAAAI,QAAA;IACA,UAAAJ,IAAA,CAAAC,WAAA,OAAAD,IAAA,CAAAC,WAAA;IACA,UAAAD,IAAA,CAAAgB,eAAA,OAAAhB,IAAA,CAAAgB,eAAA;EACA;EACAE,OAAA;IACAC,OAAA;MACA,KAAAC,KAAA,CAAAC,OAAA,CAAAC,QAAA,CAAAC,KAAA;QACA,IAAAA,KAAA;UACA,KAAAlB,OAAA;UAEA,KAAAmB,QAAA,CAAAC,GAAA,yBAAAzB,IAAA,EAAA0B,IAAA,CAAAC,GAAA;YACA,IAAAA,GAAA,CAAAC,IAAA;cACApB,YAAA,CAAAqB,UAAA;cACA,KAAAC,QAAA;gBACAlB,OAAA;gBACAmB,IAAA;gBACAC,QAAA;cACA;;cAEA;cACAC,UAAA;gBACA,KAAAC,OAAA,CAAAC,IAAA;cACA;YACA;cACA,KAAAL,QAAA,CAAAM,KAAA,CAAAT,GAAA,CAAAU,GAAA;YACA;UACA,GAAAC,KAAA,CAAAC,GAAA;YACAC,OAAA,CAAAJ,KAAA,2BAAAG,GAAA;YACA,KAAAT,QAAA,CAAAM,KAAA;UACA,GAAAK,OAAA;YACA,KAAApC,OAAA;UACA;QACA;UACA,KAAAyB,QAAA,CAAAY,OAAA;QACA;MACA;IACA;IAEAC,UAAA;MACA,KAAAvB,KAAA,CAAAC,OAAA,CAAAuB,WAAA;MACA,KAAA5C,IAAA,CAAAI,QAAA;MACA,KAAAJ,IAAA,CAAAC,WAAA;MACA,KAAAD,IAAA,CAAAgB,eAAA;MACA,KAAAc,QAAA,CAAAe,IAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}